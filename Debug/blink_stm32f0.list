
blink_stm32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000490  00001490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00001490  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00001490  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000490  00001490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800048c  0800048c  0000148c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000490  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000490  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000619  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ed  00000000  00000000  00001ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008416  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000686  00000000  00000000  0000a192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002c682  00000000  00000000  0000a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00036e9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  00036ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00036fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000470 	.word	0x08000470

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000470 	.word	0x08000470

08000108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	2b7f      	cmp	r3, #127	@ 0x7f
 800011a:	d809      	bhi.n	8000130 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800011c:	1dfb      	adds	r3, r7, #7
 800011e:	781b      	ldrb	r3, [r3, #0]
 8000120:	001a      	movs	r2, r3
 8000122:	231f      	movs	r3, #31
 8000124:	401a      	ands	r2, r3
 8000126:	4b04      	ldr	r3, [pc, #16]	@ (8000138 <__NVIC_EnableIRQ+0x30>)
 8000128:	2101      	movs	r1, #1
 800012a:	4091      	lsls	r1, r2
 800012c:	000a      	movs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
  }
}
 8000130:	46c0      	nop			@ (mov r8, r8)
 8000132:	46bd      	mov	sp, r7
 8000134:	b002      	add	sp, #8
 8000136:	bd80      	pop	{r7, pc}
 8000138:	e000e100 	.word	0xe000e100

0800013c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800013c:	b590      	push	{r4, r7, lr}
 800013e:	b083      	sub	sp, #12
 8000140:	af00      	add	r7, sp, #0
 8000142:	0002      	movs	r2, r0
 8000144:	6039      	str	r1, [r7, #0]
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800014a:	1dfb      	adds	r3, r7, #7
 800014c:	781b      	ldrb	r3, [r3, #0]
 800014e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000150:	d828      	bhi.n	80001a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000152:	4a2f      	ldr	r2, [pc, #188]	@ (8000210 <__NVIC_SetPriority+0xd4>)
 8000154:	1dfb      	adds	r3, r7, #7
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	b25b      	sxtb	r3, r3
 800015a:	089b      	lsrs	r3, r3, #2
 800015c:	33c0      	adds	r3, #192	@ 0xc0
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	589b      	ldr	r3, [r3, r2]
 8000162:	1dfa      	adds	r2, r7, #7
 8000164:	7812      	ldrb	r2, [r2, #0]
 8000166:	0011      	movs	r1, r2
 8000168:	2203      	movs	r2, #3
 800016a:	400a      	ands	r2, r1
 800016c:	00d2      	lsls	r2, r2, #3
 800016e:	21ff      	movs	r1, #255	@ 0xff
 8000170:	4091      	lsls	r1, r2
 8000172:	000a      	movs	r2, r1
 8000174:	43d2      	mvns	r2, r2
 8000176:	401a      	ands	r2, r3
 8000178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	019b      	lsls	r3, r3, #6
 800017e:	22ff      	movs	r2, #255	@ 0xff
 8000180:	401a      	ands	r2, r3
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	0018      	movs	r0, r3
 8000188:	2303      	movs	r3, #3
 800018a:	4003      	ands	r3, r0
 800018c:	00db      	lsls	r3, r3, #3
 800018e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000190:	481f      	ldr	r0, [pc, #124]	@ (8000210 <__NVIC_SetPriority+0xd4>)
 8000192:	1dfb      	adds	r3, r7, #7
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	b25b      	sxtb	r3, r3
 8000198:	089b      	lsrs	r3, r3, #2
 800019a:	430a      	orrs	r2, r1
 800019c:	33c0      	adds	r3, #192	@ 0xc0
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80001a2:	e031      	b.n	8000208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000214 <__NVIC_SetPriority+0xd8>)
 80001a6:	1dfb      	adds	r3, r7, #7
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	0019      	movs	r1, r3
 80001ac:	230f      	movs	r3, #15
 80001ae:	400b      	ands	r3, r1
 80001b0:	3b08      	subs	r3, #8
 80001b2:	089b      	lsrs	r3, r3, #2
 80001b4:	3306      	adds	r3, #6
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	18d3      	adds	r3, r2, r3
 80001ba:	3304      	adds	r3, #4
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	1dfa      	adds	r2, r7, #7
 80001c0:	7812      	ldrb	r2, [r2, #0]
 80001c2:	0011      	movs	r1, r2
 80001c4:	2203      	movs	r2, #3
 80001c6:	400a      	ands	r2, r1
 80001c8:	00d2      	lsls	r2, r2, #3
 80001ca:	21ff      	movs	r1, #255	@ 0xff
 80001cc:	4091      	lsls	r1, r2
 80001ce:	000a      	movs	r2, r1
 80001d0:	43d2      	mvns	r2, r2
 80001d2:	401a      	ands	r2, r3
 80001d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	019b      	lsls	r3, r3, #6
 80001da:	22ff      	movs	r2, #255	@ 0xff
 80001dc:	401a      	ands	r2, r3
 80001de:	1dfb      	adds	r3, r7, #7
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	0018      	movs	r0, r3
 80001e4:	2303      	movs	r3, #3
 80001e6:	4003      	ands	r3, r0
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001ec:	4809      	ldr	r0, [pc, #36]	@ (8000214 <__NVIC_SetPriority+0xd8>)
 80001ee:	1dfb      	adds	r3, r7, #7
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	001c      	movs	r4, r3
 80001f4:	230f      	movs	r3, #15
 80001f6:	4023      	ands	r3, r4
 80001f8:	3b08      	subs	r3, #8
 80001fa:	089b      	lsrs	r3, r3, #2
 80001fc:	430a      	orrs	r2, r1
 80001fe:	3306      	adds	r3, #6
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	18c3      	adds	r3, r0, r3
 8000204:	3304      	adds	r3, #4
 8000206:	601a      	str	r2, [r3, #0]
}
 8000208:	46c0      	nop			@ (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	b003      	add	sp, #12
 800020e:	bd90      	pop	{r4, r7, pc}
 8000210:	e000e100 	.word	0xe000e100
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <main>:
void Init_Clock();
void Init_Pin();

volatile uint8_t i = 0;

int main() {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	Init_Clock();
 800021c:	f000 f804 	bl	8000228 <Init_Clock>
	Init_Pin();
 8000220:	f000 f830 	bl	8000284 <Init_Pin>

	while (1) {
 8000224:	46c0      	nop			@ (mov r8, r8)
 8000226:	e7fd      	b.n	8000224 <main+0xc>

08000228 <Init_Clock>:
//			asm("nop");
//		}
	}
}

void Init_Clock() {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	RCC->CR |= (1 << 0); /* HSI on */
 800022c:	4b13      	ldr	r3, [pc, #76]	@ (800027c <Init_Clock+0x54>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <Init_Clock+0x54>)
 8000232:	2101      	movs	r1, #1
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
	while (((RCC->CR >> 1) & 1UL) == 0) {
 8000238:	46c0      	nop			@ (mov r8, r8)
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <Init_Clock+0x54>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2202      	movs	r2, #2
 8000240:	4013      	ands	r3, r2
 8000242:	d0fa      	beq.n	800023a <Init_Clock+0x12>

	}

//	FLASH->ACR &= ~(7 << 0); /* Zero wait state */

	RCC->CFGR &= ~(1 << 7); /* HCLK not divided */
 8000244:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <Init_Clock+0x54>)
 8000246:	685a      	ldr	r2, [r3, #4]
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <Init_Clock+0x54>)
 800024a:	2180      	movs	r1, #128	@ 0x80
 800024c:	438a      	bics	r2, r1
 800024e:	605a      	str	r2, [r3, #4]
	RCC->CFGR &= ~(1 << 10); /* PCLK not divided */
 8000250:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <Init_Clock+0x54>)
 8000252:	685a      	ldr	r2, [r3, #4]
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <Init_Clock+0x54>)
 8000256:	490a      	ldr	r1, [pc, #40]	@ (8000280 <Init_Clock+0x58>)
 8000258:	400a      	ands	r2, r1
 800025a:	605a      	str	r2, [r3, #4]

	RCC->CFGR &= ~(1 << 3); /* Use HSI */
 800025c:	4b07      	ldr	r3, [pc, #28]	@ (800027c <Init_Clock+0x54>)
 800025e:	685a      	ldr	r2, [r3, #4]
 8000260:	4b06      	ldr	r3, [pc, #24]	@ (800027c <Init_Clock+0x54>)
 8000262:	2108      	movs	r1, #8
 8000264:	438a      	bics	r2, r1
 8000266:	605a      	str	r2, [r3, #4]
	RCC->CFGR &= ~(1 << 2);
 8000268:	4b04      	ldr	r3, [pc, #16]	@ (800027c <Init_Clock+0x54>)
 800026a:	685a      	ldr	r2, [r3, #4]
 800026c:	4b03      	ldr	r3, [pc, #12]	@ (800027c <Init_Clock+0x54>)
 800026e:	2104      	movs	r1, #4
 8000270:	438a      	bics	r2, r1
 8000272:	605a      	str	r2, [r3, #4]
}
 8000274:	46c0      	nop			@ (mov r8, r8)
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	40021000 	.word	0x40021000
 8000280:	fffffbff 	.word	0xfffffbff

08000284 <Init_Pin>:

void Init_Pin() {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	RCC->AHBENR |= (1 << 17); /* CLK to PORTA */
 8000288:	4b34      	ldr	r3, [pc, #208]	@ (800035c <Init_Pin+0xd8>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4b33      	ldr	r3, [pc, #204]	@ (800035c <Init_Pin+0xd8>)
 800028e:	2180      	movs	r1, #128	@ 0x80
 8000290:	0289      	lsls	r1, r1, #10
 8000292:	430a      	orrs	r2, r1
 8000294:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= (1 << 19); /* CLK to PORTC */
 8000296:	4b31      	ldr	r3, [pc, #196]	@ (800035c <Init_Pin+0xd8>)
 8000298:	695a      	ldr	r2, [r3, #20]
 800029a:	4b30      	ldr	r3, [pc, #192]	@ (800035c <Init_Pin+0xd8>)
 800029c:	2180      	movs	r1, #128	@ 0x80
 800029e:	0309      	lsls	r1, r1, #12
 80002a0:	430a      	orrs	r2, r1
 80002a2:	615a      	str	r2, [r3, #20]

	GPIOA->MODER &= ~(1 << 11);
 80002a4:	2390      	movs	r3, #144	@ 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	2390      	movs	r3, #144	@ 0x90
 80002ac:	05db      	lsls	r3, r3, #23
 80002ae:	492c      	ldr	r1, [pc, #176]	@ (8000360 <Init_Pin+0xdc>)
 80002b0:	400a      	ands	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1 << 10); /* PA5 as generic output */
 80002b4:	2390      	movs	r3, #144	@ 0x90
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	2390      	movs	r3, #144	@ 0x90
 80002bc:	05db      	lsls	r3, r3, #23
 80002be:	2180      	movs	r1, #128	@ 0x80
 80002c0:	00c9      	lsls	r1, r1, #3
 80002c2:	430a      	orrs	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]

	GPIOC->MODER &= ~(3 << 26); /* PC13 as input */
 80002c6:	4b27      	ldr	r3, [pc, #156]	@ (8000364 <Init_Pin+0xe0>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	4b26      	ldr	r3, [pc, #152]	@ (8000364 <Init_Pin+0xe0>)
 80002cc:	4926      	ldr	r1, [pc, #152]	@ (8000368 <Init_Pin+0xe4>)
 80002ce:	400a      	ands	r2, r1
 80002d0:	601a      	str	r2, [r3, #0]
	GPIOC->PUPDR &= ~(3 << 26);
 80002d2:	4b24      	ldr	r3, [pc, #144]	@ (8000364 <Init_Pin+0xe0>)
 80002d4:	68da      	ldr	r2, [r3, #12]
 80002d6:	4b23      	ldr	r3, [pc, #140]	@ (8000364 <Init_Pin+0xe0>)
 80002d8:	4923      	ldr	r1, [pc, #140]	@ (8000368 <Init_Pin+0xe4>)
 80002da:	400a      	ands	r2, r1
 80002dc:	60da      	str	r2, [r3, #12]
	GPIOC->PUPDR |= (1 << 27); /* PC13 as pull-down */
 80002de:	4b21      	ldr	r3, [pc, #132]	@ (8000364 <Init_Pin+0xe0>)
 80002e0:	68da      	ldr	r2, [r3, #12]
 80002e2:	4b20      	ldr	r3, [pc, #128]	@ (8000364 <Init_Pin+0xe0>)
 80002e4:	2180      	movs	r1, #128	@ 0x80
 80002e6:	0509      	lsls	r1, r1, #20
 80002e8:	430a      	orrs	r2, r1
 80002ea:	60da      	str	r2, [r3, #12]

	GPIOA->ODR |= (1 << 5);
 80002ec:	2390      	movs	r3, #144	@ 0x90
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	695a      	ldr	r2, [r3, #20]
 80002f2:	2390      	movs	r3, #144	@ 0x90
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	2120      	movs	r1, #32
 80002f8:	430a      	orrs	r2, r1
 80002fa:	615a      	str	r2, [r3, #20]

	RCC->APB2ENR |= (1 << 0); /* CLK to SYSCFG */
 80002fc:	4b17      	ldr	r3, [pc, #92]	@ (800035c <Init_Pin+0xd8>)
 80002fe:	699a      	ldr	r2, [r3, #24]
 8000300:	4b16      	ldr	r3, [pc, #88]	@ (800035c <Init_Pin+0xd8>)
 8000302:	2101      	movs	r1, #1
 8000304:	430a      	orrs	r2, r1
 8000306:	619a      	str	r2, [r3, #24]

	SYSCFG->EXTICR[3] &= ~(15 << 4);
 8000308:	4b18      	ldr	r3, [pc, #96]	@ (800036c <Init_Pin+0xe8>)
 800030a:	695a      	ldr	r2, [r3, #20]
 800030c:	4b17      	ldr	r3, [pc, #92]	@ (800036c <Init_Pin+0xe8>)
 800030e:	21f0      	movs	r1, #240	@ 0xf0
 8000310:	438a      	bics	r2, r1
 8000312:	615a      	str	r2, [r3, #20]
	SYSCFG->EXTICR[3] |= (1 << 5); /* PC13 as EXTI */
 8000314:	4b15      	ldr	r3, [pc, #84]	@ (800036c <Init_Pin+0xe8>)
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	4b14      	ldr	r3, [pc, #80]	@ (800036c <Init_Pin+0xe8>)
 800031a:	2120      	movs	r1, #32
 800031c:	430a      	orrs	r2, r1
 800031e:	615a      	str	r2, [r3, #20]
	EXTI->IMR |= (1 << 13); /* EXTI line 13 unmasked */
 8000320:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <Init_Pin+0xec>)
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <Init_Pin+0xec>)
 8000326:	2180      	movs	r1, #128	@ 0x80
 8000328:	0189      	lsls	r1, r1, #6
 800032a:	430a      	orrs	r2, r1
 800032c:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= (1 << 13); /* EXTI line 13 interrupt-on-rising edge */
 800032e:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <Init_Pin+0xec>)
 8000330:	689a      	ldr	r2, [r3, #8]
 8000332:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <Init_Pin+0xec>)
 8000334:	2180      	movs	r1, #128	@ 0x80
 8000336:	0189      	lsls	r1, r1, #6
 8000338:	430a      	orrs	r2, r1
 800033a:	609a      	str	r2, [r3, #8]
	EXTI->FTSR &= ~(1 << 13); /* EXTI line 13 NOT interrupt-on-falling edge */
 800033c:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <Init_Pin+0xec>)
 800033e:	68da      	ldr	r2, [r3, #12]
 8000340:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <Init_Pin+0xec>)
 8000342:	490c      	ldr	r1, [pc, #48]	@ (8000374 <Init_Pin+0xf0>)
 8000344:	400a      	ands	r2, r1
 8000346:	60da      	str	r2, [r3, #12]

	NVIC_SetPriority (EXTI4_15_IRQn, 1);
 8000348:	2101      	movs	r1, #1
 800034a:	2007      	movs	r0, #7
 800034c:	f7ff fef6 	bl	800013c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000350:	2007      	movs	r0, #7
 8000352:	f7ff fed9 	bl	8000108 <__NVIC_EnableIRQ>
}
 8000356:	46c0      	nop			@ (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40021000 	.word	0x40021000
 8000360:	fffff7ff 	.word	0xfffff7ff
 8000364:	48000800 	.word	0x48000800
 8000368:	f3ffffff 	.word	0xf3ffffff
 800036c:	40010000 	.word	0x40010000
 8000370:	40010400 	.word	0x40010400
 8000374:	ffffdfff 	.word	0xffffdfff

08000378 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler() {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	if (i == 1) {
 800037c:	4b13      	ldr	r3, [pc, #76]	@ (80003cc <EXTI4_15_IRQHandler+0x54>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	2b01      	cmp	r3, #1
 8000384:	d10c      	bne.n	80003a0 <EXTI4_15_IRQHandler+0x28>
		i = 0;
 8000386:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <EXTI4_15_IRQHandler+0x54>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR  |= (1 << 21);
 800038c:	2390      	movs	r3, #144	@ 0x90
 800038e:	05db      	lsls	r3, r3, #23
 8000390:	699a      	ldr	r2, [r3, #24]
 8000392:	2390      	movs	r3, #144	@ 0x90
 8000394:	05db      	lsls	r3, r3, #23
 8000396:	2180      	movs	r1, #128	@ 0x80
 8000398:	0389      	lsls	r1, r1, #14
 800039a:	430a      	orrs	r2, r1
 800039c:	619a      	str	r2, [r3, #24]
 800039e:	e00a      	b.n	80003b6 <EXTI4_15_IRQHandler+0x3e>
	} else {
		i = 1;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <EXTI4_15_IRQHandler+0x54>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR  |= (1 << 5);
 80003a6:	2390      	movs	r3, #144	@ 0x90
 80003a8:	05db      	lsls	r3, r3, #23
 80003aa:	699a      	ldr	r2, [r3, #24]
 80003ac:	2390      	movs	r3, #144	@ 0x90
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	2120      	movs	r1, #32
 80003b2:	430a      	orrs	r2, r1
 80003b4:	619a      	str	r2, [r3, #24]
	}
	EXTI->PR |= (1 << 13);
 80003b6:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <EXTI4_15_IRQHandler+0x58>)
 80003b8:	695a      	ldr	r2, [r3, #20]
 80003ba:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <EXTI4_15_IRQHandler+0x58>)
 80003bc:	2180      	movs	r1, #128	@ 0x80
 80003be:	0189      	lsls	r1, r1, #6
 80003c0:	430a      	orrs	r2, r1
 80003c2:	615a      	str	r2, [r3, #20]
}
 80003c4:	46c0      	nop			@ (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	2000001c 	.word	0x2000001c
 80003d0:	40010400 	.word	0x40010400

080003d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d4:	480d      	ldr	r0, [pc, #52]	@ (800040c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d8:	e000      	b.n	80003dc <Reset_Handler+0x8>
 80003da:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003dc:	480c      	ldr	r0, [pc, #48]	@ (8000410 <LoopForever+0x6>)
  ldr r1, =_edata
 80003de:	490d      	ldr	r1, [pc, #52]	@ (8000414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000418 <LoopForever+0xe>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e4:	e002      	b.n	80003ec <LoopCopyDataInit>

080003e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ea:	3304      	adds	r3, #4

080003ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f0:	d3f9      	bcc.n	80003e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	@ (800041c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000420 <LoopForever+0x16>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f8:	e001      	b.n	80003fe <LoopFillZerobss>

080003fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003fc:	3204      	adds	r2, #4

080003fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000400:	d3fb      	bcc.n	80003fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000402:	f000 f811 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000406:	f7ff ff07 	bl	8000218 <main>

0800040a <LoopForever>:

LoopForever:
  b LoopForever
 800040a:	e7fe      	b.n	800040a <LoopForever>
  ldr   r0, =_estack
 800040c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000418:	08000490 	.word	0x08000490
  ldr r2, =_sbss
 800041c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000420:	20000020 	.word	0x20000020

08000424 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC_IRQHandler>
	...

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	2600      	movs	r6, #0
 800042c:	4c0c      	ldr	r4, [pc, #48]	@ (8000460 <__libc_init_array+0x38>)
 800042e:	4d0d      	ldr	r5, [pc, #52]	@ (8000464 <__libc_init_array+0x3c>)
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	42a6      	cmp	r6, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	2600      	movs	r6, #0
 800043a:	f000 f819 	bl	8000470 <_init>
 800043e:	4c0a      	ldr	r4, [pc, #40]	@ (8000468 <__libc_init_array+0x40>)
 8000440:	4d0a      	ldr	r5, [pc, #40]	@ (800046c <__libc_init_array+0x44>)
 8000442:	1b64      	subs	r4, r4, r5
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	42a6      	cmp	r6, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	00b3      	lsls	r3, r6, #2
 800044e:	58eb      	ldr	r3, [r5, r3]
 8000450:	4798      	blx	r3
 8000452:	3601      	adds	r6, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	00b3      	lsls	r3, r6, #2
 8000458:	58eb      	ldr	r3, [r5, r3]
 800045a:	4798      	blx	r3
 800045c:	3601      	adds	r6, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	0800048c 	.word	0x0800048c
 800046c:	08000488 	.word	0x08000488

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
