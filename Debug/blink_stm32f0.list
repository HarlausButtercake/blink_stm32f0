
blink_stm32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e0  080002e8  000012e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e0  080002e0  000012e8  2**0
                  CONTENTS
  4 .ARM          00000000  080002e0  080002e0  000012e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e0  080002e8  000012e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e0  080002e0  000012e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002e4  080002e4  000012e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002e8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002e8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002f2  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000014c  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000038  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008412  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005a8  00000000  00000000  00009bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002c492  00000000  00000000  0000a19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0003662c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000094  00000000  00000000  00036670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00036704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002c8 	.word	0x080002c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002c8 	.word	0x080002c8

08000108 <main>:
#endif

void Init_Clock();
void Init_Pin();

int main() {
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	Init_Clock();
 800010e:	f000 f82d 	bl	800016c <Init_Clock>
	Init_Pin();
 8000112:	f000 f861 	bl	80001d8 <Init_Pin>

	while (1) {
		GPIOA->BSRR  |= (1 << 21);
 8000116:	2390      	movs	r3, #144	@ 0x90
 8000118:	05db      	lsls	r3, r3, #23
 800011a:	699a      	ldr	r2, [r3, #24]
 800011c:	2390      	movs	r3, #144	@ 0x90
 800011e:	05db      	lsls	r3, r3, #23
 8000120:	2180      	movs	r1, #128	@ 0x80
 8000122:	0389      	lsls	r1, r1, #14
 8000124:	430a      	orrs	r2, r1
 8000126:	619a      	str	r2, [r3, #24]
		for (volatile int i = 0; i < 30000; i++) {
 8000128:	2300      	movs	r3, #0
 800012a:	607b      	str	r3, [r7, #4]
 800012c:	e003      	b.n	8000136 <main+0x2e>
			asm("nop");
 800012e:	46c0      	nop			@ (mov r8, r8)
		for (volatile int i = 0; i < 30000; i++) {
 8000130:	687b      	ldr	r3, [r7, #4]
 8000132:	3301      	adds	r3, #1
 8000134:	607b      	str	r3, [r7, #4]
 8000136:	687b      	ldr	r3, [r7, #4]
 8000138:	4a0b      	ldr	r2, [pc, #44]	@ (8000168 <main+0x60>)
 800013a:	4293      	cmp	r3, r2
 800013c:	ddf7      	ble.n	800012e <main+0x26>
		}
		GPIOA->BSRR |= (1 << 5);
 800013e:	2390      	movs	r3, #144	@ 0x90
 8000140:	05db      	lsls	r3, r3, #23
 8000142:	699a      	ldr	r2, [r3, #24]
 8000144:	2390      	movs	r3, #144	@ 0x90
 8000146:	05db      	lsls	r3, r3, #23
 8000148:	2120      	movs	r1, #32
 800014a:	430a      	orrs	r2, r1
 800014c:	619a      	str	r2, [r3, #24]
		for (volatile int i = 0; i < 30000; i++) {
 800014e:	2300      	movs	r3, #0
 8000150:	603b      	str	r3, [r7, #0]
 8000152:	e003      	b.n	800015c <main+0x54>
			asm("nop");
 8000154:	46c0      	nop			@ (mov r8, r8)
		for (volatile int i = 0; i < 30000; i++) {
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	3301      	adds	r3, #1
 800015a:	603b      	str	r3, [r7, #0]
 800015c:	683b      	ldr	r3, [r7, #0]
 800015e:	4a02      	ldr	r2, [pc, #8]	@ (8000168 <main+0x60>)
 8000160:	4293      	cmp	r3, r2
 8000162:	ddf7      	ble.n	8000154 <main+0x4c>
		GPIOA->BSRR  |= (1 << 21);
 8000164:	e7d7      	b.n	8000116 <main+0xe>
 8000166:	46c0      	nop			@ (mov r8, r8)
 8000168:	0000752f 	.word	0x0000752f

0800016c <Init_Clock>:
		}
	}
}

void Init_Clock() {
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
	RCC->CR |= (1 << 0); /* HSI on */
 8000170:	4b16      	ldr	r3, [pc, #88]	@ (80001cc <Init_Clock+0x60>)
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	4b15      	ldr	r3, [pc, #84]	@ (80001cc <Init_Clock+0x60>)
 8000176:	2101      	movs	r1, #1
 8000178:	430a      	orrs	r2, r1
 800017a:	601a      	str	r2, [r3, #0]
	while (((RCC->CR >> 1) & 1UL) == 0) {
 800017c:	46c0      	nop			@ (mov r8, r8)
 800017e:	4b13      	ldr	r3, [pc, #76]	@ (80001cc <Init_Clock+0x60>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2202      	movs	r2, #2
 8000184:	4013      	ands	r3, r2
 8000186:	d0fa      	beq.n	800017e <Init_Clock+0x12>

	}

	FLASH->ACR &= ~(7 << 0); /* Zero wait state */
 8000188:	4b11      	ldr	r3, [pc, #68]	@ (80001d0 <Init_Clock+0x64>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b10      	ldr	r3, [pc, #64]	@ (80001d0 <Init_Clock+0x64>)
 800018e:	2107      	movs	r1, #7
 8000190:	438a      	bics	r2, r1
 8000192:	601a      	str	r2, [r3, #0]

	RCC->CFGR &= ~(1 << 7); /* HCLK not divided */
 8000194:	4b0d      	ldr	r3, [pc, #52]	@ (80001cc <Init_Clock+0x60>)
 8000196:	685a      	ldr	r2, [r3, #4]
 8000198:	4b0c      	ldr	r3, [pc, #48]	@ (80001cc <Init_Clock+0x60>)
 800019a:	2180      	movs	r1, #128	@ 0x80
 800019c:	438a      	bics	r2, r1
 800019e:	605a      	str	r2, [r3, #4]
	RCC->CFGR &= ~(1 << 10); /* PCLK not divided */
 80001a0:	4b0a      	ldr	r3, [pc, #40]	@ (80001cc <Init_Clock+0x60>)
 80001a2:	685a      	ldr	r2, [r3, #4]
 80001a4:	4b09      	ldr	r3, [pc, #36]	@ (80001cc <Init_Clock+0x60>)
 80001a6:	490b      	ldr	r1, [pc, #44]	@ (80001d4 <Init_Clock+0x68>)
 80001a8:	400a      	ands	r2, r1
 80001aa:	605a      	str	r2, [r3, #4]

	RCC->CFGR &= ~(1 << 3); /* Use HSI */
 80001ac:	4b07      	ldr	r3, [pc, #28]	@ (80001cc <Init_Clock+0x60>)
 80001ae:	685a      	ldr	r2, [r3, #4]
 80001b0:	4b06      	ldr	r3, [pc, #24]	@ (80001cc <Init_Clock+0x60>)
 80001b2:	2108      	movs	r1, #8
 80001b4:	438a      	bics	r2, r1
 80001b6:	605a      	str	r2, [r3, #4]
	RCC->CFGR &= ~(1 << 2);
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <Init_Clock+0x60>)
 80001ba:	685a      	ldr	r2, [r3, #4]
 80001bc:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <Init_Clock+0x60>)
 80001be:	2104      	movs	r1, #4
 80001c0:	438a      	bics	r2, r1
 80001c2:	605a      	str	r2, [r3, #4]
}
 80001c4:	46c0      	nop			@ (mov r8, r8)
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	46c0      	nop			@ (mov r8, r8)
 80001cc:	40021000 	.word	0x40021000
 80001d0:	40022000 	.word	0x40022000
 80001d4:	fffffbff 	.word	0xfffffbff

080001d8 <Init_Pin>:

void Init_Pin() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	RCC->AHBENR |= (1 << 17); /* CLK to PORTA */
 80001dc:	4b11      	ldr	r3, [pc, #68]	@ (8000224 <Init_Pin+0x4c>)
 80001de:	695a      	ldr	r2, [r3, #20]
 80001e0:	4b10      	ldr	r3, [pc, #64]	@ (8000224 <Init_Pin+0x4c>)
 80001e2:	2180      	movs	r1, #128	@ 0x80
 80001e4:	0289      	lsls	r1, r1, #10
 80001e6:	430a      	orrs	r2, r1
 80001e8:	615a      	str	r2, [r3, #20]

	GPIOA->MODER &= ~(1 << 11);
 80001ea:	2390      	movs	r3, #144	@ 0x90
 80001ec:	05db      	lsls	r3, r3, #23
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	2390      	movs	r3, #144	@ 0x90
 80001f2:	05db      	lsls	r3, r3, #23
 80001f4:	490c      	ldr	r1, [pc, #48]	@ (8000228 <Init_Pin+0x50>)
 80001f6:	400a      	ands	r2, r1
 80001f8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1 << 10); /* PA5 as generic output */
 80001fa:	2390      	movs	r3, #144	@ 0x90
 80001fc:	05db      	lsls	r3, r3, #23
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	2390      	movs	r3, #144	@ 0x90
 8000202:	05db      	lsls	r3, r3, #23
 8000204:	2180      	movs	r1, #128	@ 0x80
 8000206:	00c9      	lsls	r1, r1, #3
 8000208:	430a      	orrs	r2, r1
 800020a:	601a      	str	r2, [r3, #0]

	GPIOA->ODR &= ~(1 << 5);
 800020c:	2390      	movs	r3, #144	@ 0x90
 800020e:	05db      	lsls	r3, r3, #23
 8000210:	695a      	ldr	r2, [r3, #20]
 8000212:	2390      	movs	r3, #144	@ 0x90
 8000214:	05db      	lsls	r3, r3, #23
 8000216:	2120      	movs	r1, #32
 8000218:	438a      	bics	r2, r1
 800021a:	615a      	str	r2, [r3, #20]
}
 800021c:	46c0      	nop			@ (mov r8, r8)
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)
 8000224:	40021000 	.word	0x40021000
 8000228:	fffff7ff 	.word	0xfffff7ff

0800022c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800022c:	480d      	ldr	r0, [pc, #52]	@ (8000264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000230:	e000      	b.n	8000234 <Reset_Handler+0x8>
 8000232:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000234:	480c      	ldr	r0, [pc, #48]	@ (8000268 <LoopForever+0x6>)
  ldr r1, =_edata
 8000236:	490d      	ldr	r1, [pc, #52]	@ (800026c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000238:	4a0d      	ldr	r2, [pc, #52]	@ (8000270 <LoopForever+0xe>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800023c:	e002      	b.n	8000244 <LoopCopyDataInit>

0800023e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000242:	3304      	adds	r3, #4

08000244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000248:	d3f9      	bcc.n	800023e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024a:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800024c:	4c0a      	ldr	r4, [pc, #40]	@ (8000278 <LoopForever+0x16>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000250:	e001      	b.n	8000256 <LoopFillZerobss>

08000252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000254:	3204      	adds	r2, #4

08000256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000258:	d3fb      	bcc.n	8000252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025a:	f000 f811 	bl	8000280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025e:	f7ff ff53 	bl	8000108 <main>

08000262 <LoopForever>:

LoopForever:
  b LoopForever
 8000262:	e7fe      	b.n	8000262 <LoopForever>
  ldr   r0, =_estack
 8000264:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800026c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000270:	080002e8 	.word	0x080002e8
  ldr r2, =_sbss
 8000274:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000278:	2000001c 	.word	0x2000001c

0800027c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800027c:	e7fe      	b.n	800027c <ADC_IRQHandler>
	...

08000280 <__libc_init_array>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	2600      	movs	r6, #0
 8000284:	4c0c      	ldr	r4, [pc, #48]	@ (80002b8 <__libc_init_array+0x38>)
 8000286:	4d0d      	ldr	r5, [pc, #52]	@ (80002bc <__libc_init_array+0x3c>)
 8000288:	1b64      	subs	r4, r4, r5
 800028a:	10a4      	asrs	r4, r4, #2
 800028c:	42a6      	cmp	r6, r4
 800028e:	d109      	bne.n	80002a4 <__libc_init_array+0x24>
 8000290:	2600      	movs	r6, #0
 8000292:	f000 f819 	bl	80002c8 <_init>
 8000296:	4c0a      	ldr	r4, [pc, #40]	@ (80002c0 <__libc_init_array+0x40>)
 8000298:	4d0a      	ldr	r5, [pc, #40]	@ (80002c4 <__libc_init_array+0x44>)
 800029a:	1b64      	subs	r4, r4, r5
 800029c:	10a4      	asrs	r4, r4, #2
 800029e:	42a6      	cmp	r6, r4
 80002a0:	d105      	bne.n	80002ae <__libc_init_array+0x2e>
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	00b3      	lsls	r3, r6, #2
 80002a6:	58eb      	ldr	r3, [r5, r3]
 80002a8:	4798      	blx	r3
 80002aa:	3601      	adds	r6, #1
 80002ac:	e7ee      	b.n	800028c <__libc_init_array+0xc>
 80002ae:	00b3      	lsls	r3, r6, #2
 80002b0:	58eb      	ldr	r3, [r5, r3]
 80002b2:	4798      	blx	r3
 80002b4:	3601      	adds	r6, #1
 80002b6:	e7f2      	b.n	800029e <__libc_init_array+0x1e>
 80002b8:	080002e0 	.word	0x080002e0
 80002bc:	080002e0 	.word	0x080002e0
 80002c0:	080002e4 	.word	0x080002e4
 80002c4:	080002e0 	.word	0x080002e0

080002c8 <_init>:
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ce:	bc08      	pop	{r3}
 80002d0:	469e      	mov	lr, r3
 80002d2:	4770      	bx	lr

080002d4 <_fini>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr
